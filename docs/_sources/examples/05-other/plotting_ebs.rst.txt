
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\05-other\plotting_ebs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_05-other_plotting_ebs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05-other_plotting_ebs.py:


.. _ref_example_ebs:

Example of finding the bandgap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ElectronicBandStructure is used to handle the information 
related to the electronic band structure.

.. code-block::
   :caption: General Format

   import pyprocar
   pyprocar.io.Parser(code="vasp", dir=data_dir)

.. code-block::
   :caption: Downloading example

    data_dir = pyprocar.download_example(save_dir='', 
                                material='Fe',
                                code='vasp', 
                                spin_calc_type='non-spin-polarized',
                                calc_type='bands')

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 1

    import pyvista as pv
    # You do not need this. This is to ensure an image is rendered off screen when generating exmaple gallery.
    pv.OFF_SCREEN = True









.. GENERATED FROM PYTHON SOURCE LINES 34-35

importing pyprocar and specify the local data_dir

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: default


    import os
    import numpy as np
    import pyprocar

    data_dir = f"{pyprocar.utils.ROOT}{os.sep}data{os.sep}examples{os.sep}Fe{os.sep}vasp{os.sep}non-spin-polarized{os.sep}fermi"









.. GENERATED FROM PYTHON SOURCE LINES 44-45

Initialize the parser object and get the ElectronicBandStructure 

.. GENERATED FROM PYTHON SOURCE LINES 45-54

.. code-block:: default


    parser=pyprocar.io.Parser(code="vasp",dir=data_dir)
    ebs=parser.ebs
    e_fermi = parser.ebs.efermi
    structure = parser.structure
    # Apply symmetry to get a full kmesh
    if structure.rotations is not None:
        ebs.ibz2fbz(structure.rotations)








.. GENERATED FROM PYTHON SOURCE LINES 55-56

You can print the object to see some information about the Band Structure

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default


    print(ebs)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Enectronic Band Structure     
    ------------------------     
    Total number of kpoints  = 3375
    Total number of bands    = 8
    Total number of atoms    = 1
    Total number of orbitals = 9





.. GENERATED FROM PYTHON SOURCE LINES 61-62

Let's plot the kpoints

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: default


    p=pv.Plotter()
    p.add_mesh(ebs.kpoints, color='blue', render_points_as_spheres=True)
    p.show()





.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_001.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-74

Other properties
+++++++++++++++++++++++++++

Bands
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 74-82

.. code-block:: default

    kpoints=pv.PolyData(ebs.kpoints)
    kpoints['band_0']=ebs.bands[:,0,0]

    p=pv.Plotter()
    p.add_mesh(kpoints, color='blue', scalars='band_0', render_points_as_spheres=True, point_size=10)
    p.show()





.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_002.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-85

Projections
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 85-92

.. code-block:: default

    print(ebs.projected.shape)
    kpoints['band_0-atom_0-orbital_5-spin-0']=ebs.projected[:,0,0,0,4,0]

    p=pv.Plotter()
    p.add_mesh(kpoints, color='blue', scalars='band_0-atom_0-orbital_5-spin-0', render_points_as_spheres=True, point_size=10)
    p.show()




.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_003.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (3375, 8, 1, 1, 9, 1)




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Gradients
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 95-104

.. code-block:: default

    print(ebs.bands_gradient.shape)
    kpoints['band_0-gradients']=ebs.bands_gradient[:,:,0,0]

    # Use the Glyph filter to generate arrows for the vectors
    arrows = kpoints.glyph(orient='band_0-gradients', scale=False, factor=0.08)
    p=pv.Plotter()
    p.add_mesh(arrows,scalar_bar_args={'title':'band_0-band_velocity'})
    p.show()




.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_004.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (3375, 3, 8, 1)




.. GENERATED FROM PYTHON SOURCE LINES 105-107

Band/Fermi velocities
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 107-118

.. code-block:: default

    print(ebs.fermi_velocity.shape)
    kpoints['band_0-band_velocity']=ebs.fermi_velocity[:,:,0,0]
    kpoints['band_0-band_speed']=ebs.fermi_speed[:,0,0]

    arrows = kpoints.glyph(orient='band_0-band_velocity', scale=False, factor=0.08)
    p=pv.Plotter()
    p.add_mesh(kpoints, scalars='band_0-band_speed', render_points_as_spheres=True, point_size=0.1,show_scalar_bar=False)
    p.add_mesh(arrows,scalar_bar_args={'title':'band_0-band_velocity'})
    p.show()





.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_005.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (3375, 3, 8, 1)




.. GENERATED FROM PYTHON SOURCE LINES 119-121

Effective mass
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 121-129

.. code-block:: default

    print(ebs.harmonic_average_effective_mass.shape)
    kpoints['band_0-harmonic_average_effective_mass']=ebs.harmonic_average_effective_mass[:,0,0]

    p=pv.Plotter()
    p.add_mesh(kpoints, scalars='band_0-harmonic_average_effective_mass', render_points_as_spheres=True, point_size=10)
    p.show()





.. image-sg:: /examples/05-other/images/sphx_glr_plotting_ebs_006.png
   :alt: plotting ebs
   :srcset: /examples/05-other/images/sphx_glr_plotting_ebs_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (3375, 8, 1)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.186 seconds)


.. _sphx_glr_download_examples_05-other_plotting_ebs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plotting_ebs.py <plotting_ebs.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plotting_ebs.ipynb <plotting_ebs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
